!function(n){var e={};function r(t){if(e[t])return e[t].exports;var o=e[t]={i:t,l:!1,exports:{}};return n[t].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=n,r.c=e,r.d=function(n,e,t){r.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},r.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},r.t=function(n,e){if(1&e&&(n=r(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)r.d(t,o,function(e){return n[e]}.bind(null,o));return t},r.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return r.d(e,"a",e),e},r.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},r.p="",r(r.s=0)}([function(n,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const t=r(1);r(4),console.log("Starting game logic...");var o=document.querySelector("canvas"),i=o.getContext("2d");o.width=700,o.height=700;console.log("Initializing SpriteOperations..."),t.Initialize()?(console.log("Sprites initialized! Starting game loop..."),function n(e){t.DrawGameBoard(i),requestAnimationFrame(n)}()):console.log("Sprites failed to load!")},function(n,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const t=r(2);r(3);class o{constructor(n,e,r,t){this.srcTileX=n,this.srcTileY=e,this.drawTileX=r,this.drawTileY=t}}var i=!1,a=null,s=-1,c=-1;e.DrawGameBoard=function(n){return!!i},e.Initialize=function(){return!!function(n){console.log("Printing gameboard text..."),console.log(n);var e=n.split("\n");s=e[0].length,c=e.length;for(var r=0;r<e.length;r++)if(e[r].length!==s)return console.log("ERROR: Line "+r+" does not have the correct number of tiles! Map is malformed!"),!1;for(a=new Array,r=0;r<e.length;r++)for(var t=e[r],l=0;l<t.length;l++)switch(t[l]){case"┏":case"━":case"┓":case"┃":case"┗":case"┛":a.push(new o(r,l,0,0));break;case".":case"O":case" ":break;default:return console.log("ERROR: Unhandle char: '"+t[l]+"' at i,j="+r+","+l),!1}return console.log("Processed Gameboard. Width="+s+", Height="+c),i=!0,!0}(t.default)&&(i=!0,!0)}},function(n,e,r){"use strict";r.r(e),e.default="┏━━━━━━━━━━━━┓┏━━━━━━━━━━━━┓\r\n┃............┃┃............┃\r\n┃.┏━━┓.┏━━━┓.┃┃.┏━━━┓.┏━━┓.┃\r\n┃O┃  ┃.┃   ┃.┃┃.┃   ┃.┃  ┃O┃\r\n┃.┗━━┛.┗━━━┛.┗┛.┗━━━┛.┗━━┛.┃\r\n┃..........................┃\r\n┃.┏━━┓.┏┓.┏━━━━━━┓.┏┓.┏━━┓.┃\r\n┃.┗━━┛.┃┃.┗━━┓┏━━┛.┃┃.┗━━┛.┃\r\n┃......┃┃....┃┃....┃┃......┃\r\n┗━━━━┓.┃┗━━┓ ┃┃ ┏━━┛┃.┏━━━━┛\r\n     ┃.┃┏━━┛ ┗┛ ┗━━┓┃.┃     \r\n     ┃.┃┃          ┃┃.┃     \r\n     ┃.┃┃ ┏━━━━━━┓ ┃┃.┃     \r\n━━━━━┛.┗┛ ┃      ┃ ┗┛.┗━━━━━\r\n      .   ┃      ┃   .      \r\n━━━━━┓.┏┓ ┃      ┃ ┏┓.┏━━━━━\r\n     ┃.┃┃ ┗━━━━━━┛ ┃┃.┃     \r\n     ┃.┃┃          ┃┃.┃     \r\n     ┃.┃┃ ┏━━━━━━┓ ┃┃.┃     \r\n┏━━━━┛.┗┛ ┗━━┓┏━━┛ ┗┛.┗━━━━┓\r\n┃............┃┃............┃\r\n┃.┏━━┓.┏━━━┓.┃┃.┏━━━┓.┏━━┓.┃\r\n┃.┗━┓┃.┗━━━┛.┗┛.┗━━━┛.┃┏━┛.┃\r\n┃O..┃┃.......  .......┃┃..O┃\r\n┗━┓.┃┃.┏┓.┏━━━━━━┓.┏┓.┃┃.┏━┛\r\n┏━┛.┗┛.┃┃.┗━━┓┏━━┛.┃┃.┗┛.┗━┓\r\n┃......┃┃....┃┃....┃┃......┃\r\n┃.┏━━━━┛┗━━┓.┃┃.┏━━┛┗━━━━┓.┃\r\n┃.┗━━━━━━━━┛.┗┛.┗━━━━━━━━┛.┃\r\n┃..........................┃\r\n┗━━━━━━━━━━━━━━━━━━━━━━━━━━┛"},function(n,e,r){n.exports=r.p+"fb0f3cd40f1cabfd136204fb9835cf42.png"},function(n,e,r){var t=r(5);"string"==typeof t&&(t=[[n.i,t,""]]);var o={insert:"head",singleton:!1};r(7)(t,o);t.locals&&(n.exports=t.locals)},function(n,e,r){(n.exports=r(6)(!1)).push([n.i,"html, body {\r\n  margin: 0;\r\n}\r\n\r\nhtml {\r\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  height: 100%;\r\n}\r\n\r\nbody {\r\n  background: #84AAB2;\r\n}\r\n\r\n\r\n\r\na:link {\r\n\r\n  text-decoration: none;\r\n  color: white;\r\n}\r\n\r\n.divheaderbar {\r\n  display: grid;\r\n  background: #364B4C;\r\n  width: 100%;\r\n  padding: 20px 40px;\r\n}\r\n\r\n.divgamecontainer {\r\n  height:inherit;\r\n  display: flex;\r\n  width: 768px;\r\n  /* Orders items top-bottom */\r\n  flex-direction: column;\r\n  background: #678787;\r\n\r\n  /* Allows the div to size itself according to the children and center itself. */\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n}\r\n\r\n.title {\r\n  /* Forces title card to center itself */\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 40px;\r\n  height: 40px;\r\n}\r\n\r\ncanvas {\r\n  /* Canvas width/height set in code */\r\n  margin-top: 30px;\r\n  margin-left: 20px;\r\n  margin-right: 20px;\r\n}",""])},function(n,e,r){"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r=function(n,e){var r=n[1]||"",t=n[3];if(!t)return r;if(e&&"function"==typeof btoa){var o=(a=t,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot).concat(n," */")}));return[r].concat(i).concat([o]).join("\n")}var a,s,c;return[r].join("\n")}(e,n);return e[2]?"@media ".concat(e[2],"{").concat(r,"}"):r})).join("")},e.i=function(n,r){"string"==typeof n&&(n=[[null,n,""]]);for(var t={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(t[i]=!0)}for(var a=0;a<n.length;a++){var s=n[a];null!=s[0]&&t[s[0]]||(r&&!s[2]?s[2]=r:r&&(s[2]="(".concat(s[2],") and (").concat(r,")")),e.push(s))}},e}},function(n,e,r){"use strict";var t,o={},i=function(){return void 0===t&&(t=Boolean(window&&document&&document.all&&!window.atob)),t},a=function(){var n={};return function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}n[e]=r}return n[e]}}();function s(n,e){for(var r=[],t={},o=0;o<n.length;o++){var i=n[o],a=e.base?i[0]+e.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};t[a]?t[a].parts.push(s):r.push(t[a]={id:a,parts:[s]})}return r}function c(n,e){for(var r=0;r<n.length;r++){var t=n[r],i=o[t.id],a=0;if(i){for(i.refs++;a<i.parts.length;a++)i.parts[a](t.parts[a]);for(;a<t.parts.length;a++)i.parts.push(v(t.parts[a],e))}else{for(var s=[];a<t.parts.length;a++)s.push(v(t.parts[a],e));o[t.id]={id:t.id,refs:1,parts:s}}}}function l(n){var e=document.createElement("style");if(void 0===n.attributes.nonce){var t=r.nc;t&&(n.attributes.nonce=t)}if(Object.keys(n.attributes).forEach((function(r){e.setAttribute(r,n.attributes[r])})),"function"==typeof n.insert)n.insert(e);else{var o=a(n.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}return e}var u,f=(u=[],function(n,e){return u[n]=e,u.filter(Boolean).join("\n")});function d(n,e,r,t){var o=r?"":t.css;if(n.styleSheet)n.styleSheet.cssText=f(e,o);else{var i=document.createTextNode(o),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(i,a[e]):n.appendChild(i)}}function p(n,e,r){var t=r.css,o=r.media,i=r.sourceMap;if(o&&n.setAttribute("media",o),i&&btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}var h=null,g=0;function v(n,e){var r,t,o;if(e.singleton){var i=g++;r=h||(h=l(e)),t=d.bind(null,r,i,!1),o=d.bind(null,r,i,!0)}else r=l(e),t=p.bind(null,r,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)};return t(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;t(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).attributes="object"==typeof e.attributes?e.attributes:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=i());var r=s(n,e);return c(r,e),function(n){for(var t=[],i=0;i<r.length;i++){var a=r[i],l=o[a.id];l&&(l.refs--,t.push(l))}n&&c(s(n,e),e);for(var u=0;u<t.length;u++){var f=t[u];if(0===f.refs){for(var d=0;d<f.parts.length;d++)f.parts[d]();delete o[f.id]}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,