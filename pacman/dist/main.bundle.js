!function(e){var n={};function r(t){if(n[t])return n[t].exports;var i=n[t]={i:t,l:!1,exports:{}};return e[t].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=n,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)r.d(t,i,function(n){return e[n]}.bind(null,i));return t},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="",r(r.s=0)}([function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const t=r(1);r(4),console.log("Starting game logic...");var i=document.querySelector("canvas"),o=i.getContext("2d");i.width=700,i.height=700;console.log("Initializing SpriteOperations..."),t.Initialize()?(console.log("Sprites initialized! Starting game loop..."),function e(n){t.DrawGameBoard(o),requestAnimationFrame(e)}()):console.log("Sprites failed to load!")},function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const t=r(2),i=r(3);class o{constructor(e,n,r,t){this.srcTileX=e,this.srcTileY=n,this.drawTileX=r,this.drawTileY=t}}var a=null,s=-1,c=-1;console.log("Creating SpriteMap");var l=new class{constructor(){this.image=new Image,this.image.src=i,this.tilePxSize=12}drawGameTile(e,n,r,t,i){var o=this.tilePxSize,a=this.tilePxSize;e.drawImage(this.image,t*this.tilePxSize,i*this.tilePxSize,o,a,n,r,o,a)}};n.DrawGameBoard=function(e){for(var n,r,t=0;t<a.length;t++)n=a[t].srcTileX*l.tilePxSize,r=a[t].srcTileY*l.tilePxSize,l.drawGameTile(e,n,r,a[t].drawTileX,a[t].drawTileY)},n.Initialize=function(){return!!function(e){console.log("Printing gameboard text..."),console.log(e);var n=e.split("\n");s=n[0].length,c=n.length;for(var r=0;r<n.length;r++)n[r].length!==s&&console.log("WARNING: Line "+r+" ("+n[r].length+") does not have the correct number of tiles!"+s+" Map is malformed!");for(a=new Array,r=0;r<n.length;r++)for(var t=n[r],i=0;i<t.length;i++)if(0!=Number(t[i]))switch(t[i]){case"┏":a.push(new o(i,r,19,3));break;case"━":a.push(new o(i,r,20,3));break;case"┓":a.push(new o(i,r,18,3));break;case"┃":a.push(new o(i,r,24,3));break;case"┗":a.push(new o(i,r,17,3));break;case"┛":a.push(new o(i,r,16,3));break;case".":case"O":case" ":case"":break;default:return console.log("ERROR: Unhandle char: '"+t[i]+"' ascii "+Number(t[i])+" at i,j="+r+","+i),!1}return console.log("Processed Gameboard. Width="+s+", Height="+c+", TileCount="+a.length),!0}(t.default)}},function(e,n,r){"use strict";r.r(n),n.default="┏━━━━━━━━━━━━┓┏━━━━━━━━━━━━┓\r\n┃............┃┃............┃\r\n┃.┏━━┓.┏━━━┓.┃┃.┏━━━┓.┏━━┓.┃\r\n┃O┃  ┃.┃   ┃.┃┃.┃   ┃.┃  ┃O┃\r\n┃.┗━━┛.┗━━━┛.┗┛.┗━━━┛.┗━━┛.┃\r\n┃..........................┃\r\n┃.┏━━┓.┏┓.┏━━━━━━┓.┏┓.┏━━┓.┃\r\n┃.┗━━┛.┃┃.┗━━┓┏━━┛.┃┃.┗━━┛.┃\r\n┃......┃┃....┃┃....┃┃......┃\r\n┗━━━━┓.┃┗━━┓ ┃┃ ┏━━┛┃.┏━━━━┛\r\n     ┃.┃┏━━┛ ┗┛ ┗━━┓┃.┃     \r\n     ┃.┃┃          ┃┃.┃     \r\n     ┃.┃┃ ┏━━━━━━┓ ┃┃.┃     \r\n━━━━━┛.┗┛ ┃      ┃ ┗┛.┗━━━━━\r\n      .   ┃      ┃   .      \r\n━━━━━┓.┏┓ ┃      ┃ ┏┓.┏━━━━━\r\n     ┃.┃┃ ┗━━━━━━┛ ┃┃.┃     \r\n     ┃.┃┃          ┃┃.┃     \r\n     ┃.┃┃ ┏━━━━━━┓ ┃┃.┃     \r\n┏━━━━┛.┗┛ ┗━━┓┏━━┛ ┗┛.┗━━━━┓\r\n┃............┃┃............┃\r\n┃.┏━━┓.┏━━━┓.┃┃.┏━━━┓.┏━━┓.┃\r\n┃.┗━┓┃.┗━━━┛.┗┛.┗━━━┛.┃┏━┛.┃\r\n┃O..┃┃.......  .......┃┃..O┃\r\n┗━┓.┃┃.┏┓.┏━━━━━━┓.┏┓.┃┃.┏━┛\r\n┏━┛.┗┛.┃┃.┗━━┓┏━━┛.┃┃.┗┛.┗━┓\r\n┃......┃┃....┃┃....┃┃......┃\r\n┃.┏━━━━┛┗━━┓.┃┃.┏━━┛┗━━━━┓.┃\r\n┃.┗━━━━━━━━┛.┗┛.┗━━━━━━━━┛.┃\r\n┃..........................┃\r\n┗━━━━━━━━━━━━━━━━━━━━━━━━━━┛"},function(e,n,r){e.exports=r.p+"fb0f3cd40f1cabfd136204fb9835cf42.png"},function(e,n,r){var t=r(5);"string"==typeof t&&(t=[[e.i,t,""]]);var i={insert:"head",singleton:!1};r(7)(t,i);t.locals&&(e.exports=t.locals)},function(e,n,r){(e.exports=r(6)(!1)).push([e.i,"html, body {\r\n  margin: 0;\r\n}\r\n\r\nhtml {\r\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  height: 100%;\r\n}\r\n\r\nbody {\r\n  background: #84AAB2;\r\n}\r\n\r\n\r\n\r\na:link {\r\n\r\n  text-decoration: none;\r\n  color: white;\r\n}\r\n\r\n.divheaderbar {\r\n  display: grid;\r\n  background: #364B4C;\r\n  width: 100%;\r\n  padding: 20px 40px;\r\n}\r\n\r\n.divgamecontainer {\r\n  height:inherit;\r\n  display: flex;\r\n  width: 768px;\r\n  /* Orders items top-bottom */\r\n  flex-direction: column;\r\n  background: #678787;\r\n\r\n  /* Allows the div to size itself according to the children and center itself. */\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n}\r\n\r\n.title {\r\n  /* Forces title card to center itself */\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 40px;\r\n  height: 40px;\r\n}\r\n\r\ncanvas {\r\n  /* Canvas width/height set in code */\r\n  margin-top: 30px;\r\n  margin-left: 20px;\r\n  margin-right: 20px;\r\n}",""])},function(e,n,r){"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r=function(e,n){var r=e[1]||"",t=e[3];if(!t)return r;if(n&&"function"==typeof btoa){var i=(a=t,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),o=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot).concat(e," */")}));return[r].concat(o).concat([i]).join("\n")}var a,s,c;return[r].join("\n")}(n,e);return n[2]?"@media ".concat(n[2],"{").concat(r,"}"):r})).join("")},n.i=function(e,r){"string"==typeof e&&(e=[[null,e,""]]);for(var t={},i=0;i<this.length;i++){var o=this[i][0];null!=o&&(t[o]=!0)}for(var a=0;a<e.length;a++){var s=e[a];null!=s[0]&&t[s[0]]||(r&&!s[2]?s[2]=r:r&&(s[2]="(".concat(s[2],") and (").concat(r,")")),n.push(s))}},n}},function(e,n,r){"use strict";var t,i={},o=function(){return void 0===t&&(t=Boolean(window&&document&&document.all&&!window.atob)),t},a=function(){var e={};return function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}e[n]=r}return e[n]}}();function s(e,n){for(var r=[],t={},i=0;i<e.length;i++){var o=e[i],a=n.base?o[0]+n.base:o[0],s={css:o[1],media:o[2],sourceMap:o[3]};t[a]?t[a].parts.push(s):r.push(t[a]={id:a,parts:[s]})}return r}function c(e,n){for(var r=0;r<e.length;r++){var t=e[r],o=i[t.id],a=0;if(o){for(o.refs++;a<o.parts.length;a++)o.parts[a](t.parts[a]);for(;a<t.parts.length;a++)o.parts.push(m(t.parts[a],n))}else{for(var s=[];a<t.parts.length;a++)s.push(m(t.parts[a],n));i[t.id]={id:t.id,refs:1,parts:s}}}}function l(e){var n=document.createElement("style");if(void 0===e.attributes.nonce){var t=r.nc;t&&(e.attributes.nonce=t)}if(Object.keys(e.attributes).forEach((function(r){n.setAttribute(r,e.attributes[r])})),"function"==typeof e.insert)e.insert(n);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}return n}var u,f=(u=[],function(e,n){return u[e]=n,u.filter(Boolean).join("\n")});function d(e,n,r,t){var i=r?"":t.css;if(e.styleSheet)e.styleSheet.cssText=f(n,i);else{var o=document.createTextNode(i),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(o,a[n]):e.appendChild(o)}}function p(e,n,r){var t=r.css,i=r.media,o=r.sourceMap;if(i&&e.setAttribute("media",i),o&&btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}var h=null,g=0;function m(e,n){var r,t,i;if(n.singleton){var o=g++;r=h||(h=l(n)),t=d.bind(null,r,o,!1),i=d.bind(null,r,o,!0)}else r=l(n),t=p.bind(null,r,n),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)};return t(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t(e=n)}else i()}}e.exports=function(e,n){(n=n||{}).attributes="object"==typeof n.attributes?n.attributes:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=o());var r=s(e,n);return c(r,n),function(e){for(var t=[],o=0;o<r.length;o++){var a=r[o],l=i[a.id];l&&(l.refs--,t.push(l))}e&&c(s(e,n),n);for(var u=0;u<t.length;u++){var f=t[u];if(0===f.refs){for(var d=0;d<f.parts.length;d++)f.parts[d]();delete i[f.id]}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,